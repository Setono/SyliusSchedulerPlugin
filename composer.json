{
    "name": "setono/sylius-scheduler-plugin",
    "type": "sylius-plugin",
    "keywords": ["sylius", "sylius-plugin", "scheduler"],
    "description": "Scheduler plugin for Sylius.",
    "license": "MIT",
    "require": {
        "php": "^7.2",
        "ext-json": "*",
        "mtdowling/cron-expression": "^1.2",
        "sylius/sylius": "~1.3"
    },
    "require-dev": {
        "behat/behat": "^3.4",
        "behat/mink": "^1.7@dev",
        "behat/mink-browserkit-driver": "^1.3",
        "behat/mink-extension": "^2.2",
        "behat/mink-selenium2-driver": "^1.3",
        "friends-of-behat/context-service-extension": "^1.2",
        "friends-of-behat/cross-container-extension": "^1.1",
        "friends-of-behat/service-container-extension": "^1.0",
        "friends-of-behat/symfony-extension": "^1.2.1",
        "friends-of-behat/variadic-extension": "^1.1",
        "lakion/mink-debug-extension": "^1.2.3",
        "phpspec/phpspec": "^5.0",
        "phpstan/phpstan-doctrine": "^0.10",
        "phpstan/phpstan-shim": "^0.10",
        "phpstan/phpstan-symfony": "^0.10",
        "phpstan/phpstan-webmozart-assert": "^0.10",
        "phpunit/phpunit": "^6.5",
        "roave/security-advisories": "dev-master",
        "sensiolabs/security-checker": "^5.0",
        "sylius-labs/coding-standard": "^2.0",
        "symfony/browser-kit": "^3.4|^4.1",
        "symfony/debug-bundle": "^3.4|^4.1",
        "symfony/dotenv": "^3.4|^4.1",
        "symfony/intl": "^3.4|^4.1",
        "symfony/web-profiler-bundle": "^3.4|^4.1",
        "symfony/web-server-bundle": "^3.4|^4.1"
    },
    "suggest": {
        "ext-pcntl": "Allows signal handlers"
    },
    "prefer-stable": true,
    "autoload": {
        "psr-4": {
            "Setono\\SyliusSchedulerPlugin\\": "src/",
            "Tests\\Setono\\SyliusSchedulerPlugin\\": "tests/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "AppBundle\\": "tests/Application/src/AppBundle/"
        }
    },
    "extra": {
        "branch-alias": {
            "dev-master": "1.0-dev"
        }
    },
    "config": {
        "sort-packages": true
    },
    "scripts": {
        "try": [
            "composer ensure-vendors-installed",
            "composer assets",
            "composer fixtures",
            "composer run"
        ],
        "assets": [
            "composer ensure-assets-installed",
            "composer ensure-assets-compiled"
        ],
        "fixtures": [
            "composer ensure-database-created",
            "composer ensure-schema-updated",
            "(cd tests/Application && bin/console sylius:fixtures:load --no-interaction -e ${SYMFONY_ENV:-'dev'})"
        ],
        "run": [
            "composer ensure-env-copied",
            "(cd tests/Application && bin/console server:run -d public -e ${SYMFONY_ENV:-'dev'})"
        ],

        "all": [
            "composer checks",
            "composer tests"
        ],
        "checks": [
            "composer check-style",
            "composer analyse"
        ],
        "tests": [
            "composer phpspec",
            "composer behat"
        ],
        "phpspec": "./vendor/bin/phpspec run",
        "behat": [
            "composer ensure-env-copied",
            "./vendor/bin/behat --no-interaction --format=progress"
        ],
        "check-style": "./vendor/bin/ecs check src tests/Application/src",
        "fix-style": "./vendor/bin/ecs check src --fix",
        "analyse": "./vendor/bin/phpstan.phar analyse -c phpstan.neon -l max src tests/Application/src",

        "ensure-vendors-installed": "[[ -f vendor/autoload.php ]] || composer install",
        "ensure-assets-installed": "[[ -d tests/Application/node_modules ]] || (cd tests/Application && yarn install)",
        "ensure-assets-compiled": "[[ -d tests/Application/public/assets ]] || (cd tests/Application && yarn build && composer ensure-env-copied && bin/console assets:install public -e ${SYMFONY_ENV:-'dev'})",
        "ensure-database-created": "composer ensure-env-copied && (cd tests/Application && bin/console doctrine:database:create --if-not-exists -e ${SYMFONY_ENV:-'dev'})",
        "ensure-schema-updated": "composer ensure-env-copied && (cd tests/Application && bin/console doctrine:schema:update --force -e ${SYMFONY_ENV:-'dev'})",
        "ensure-env-test-copied": "(cd tests/Application && ([[ -f .env.test ]] || cp .env.test.dist .env.test))",
        "ensure-env-copied": "composer ensure-env-test-copied && (cd tests/Application && cp .env.${SYMFONY_ENV:-'dev'}.dist .env)"
    }
}
